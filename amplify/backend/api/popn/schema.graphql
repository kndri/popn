type User @model {
	id: ID!
	age: String!
	username: String!
	email: String!
	avatarImageURL: String!
	sneakers: [Sneaker] @connection(keyName: "byUser", fields: ["id"])
	transactions: Int!
	offers: [Offer] @connection(keyName: "byUser", fields: ["id"])
	following: [Following] @connection(keyName: "byUser", fields: ["id"])
	follower: [Followers] @connection(keyName: "byUser", fields: ["id"])
	status: String
	zipCode: String!
	chatRoomUser: [ChatRoomUser] @connection(keyName: "byUser", fields: ["id"])
	donScore: DonScore @connection(fields: ["id"])
	totalSold: TotalSoldSneaker @connection(fields: ["id"])
	expoToken: String
}

type Mutation {
	pinpoint(input: pinpointInput): pinpointResult
		@function(name: "pinpoint-${env}")
}
type pinpointResult {
	statusCode: Int
	body: String
}
# change name to username
input pinpointInput {
	token: String!
	username: String!
	email: String!
	message: String!
	id: String!
}

# NOTE: will need to add user: User! @connection(fields: ["userID"])
# I am leaving it out to show we can get by zip and sort scores
# Will add it when we figure out when are we creating,updating scores
type DonScore
	@model
	@key(fields: ["userID"])
	@key(
		name: "byZipCode"
		fields: ["zipCode", "score"]
		queryField: "donScoreByZipCode"
	) {
	id: ID!
	userID: ID!
	zipCode: String!
	score: Int!
}
# NOTE: will need to add user: User! @connection(fields: ["userID"])
# I am leaving it out to show we can get by zip and sort scores
# Will add it when we figure out when are we creating,updating scores
type TotalSoldSneaker
	@model
	@key(fields: ["userID"])
	@key(
		name: "byZipCode"
		fields: ["zipCode", "total"]
		queryField: "totalSoldSneakersByZipCode"
	) {
	id: ID!
	userID: ID!
	zipCode: String!
	total: Int!
}

type Following
	@model
	@key(name: "byUser", fields: ["mainUserID"], queryField: "followingByUser") {
	id: ID!
	secondUserID: ID!
	mainUserID: ID!
	user: User! @connection(fields: ["mainUserID"])
}
type Followers
	@model
	@key(
		name: "byUser"
		fields: ["secondUserID"]
		queryField: "followersByUser"
	) {
	id: ID!
	secondUserID: ID!
	mainUserID: ID!
	user: User! @connection(fields: ["secondUserID"])
}
type ChatRoomUser
	@model
	@key(
		name: "byUser"
		fields: ["userID", "chatRoomID"]
		queryField: "chatRoomUserByUser"
	)
	@key(name: "byChatRoom", fields: ["chatRoomID", "userID"]) {
	id: ID!
	userID: ID!
	chatRoomID: ID!
	user: User @connection(fields: ["userID"])
	chatRoom: ChatRoom @connection(fields: ["chatRoomID"])
}
type ChatRoom @model {
	id: ID!
	offerID: ID!
	chatRoomUsers: [ChatRoomUser]!
		@connection(keyName: "byChatRoom", fields: ["id"])
	messages: [Message] @connection(keyName: "byChatRoom", fields: ["id"])
	lastMessageID: ID!
	lastMessage: Message! @connection(fields: ["lastMessageID"])
	receiverHasRead: Boolean!
	roomStatus: ChatRoomStatus!
}
type Message
	@model
	@key(
		name: "byChatRoom"
		fields: ["chatRoomID", "createdAt"]
		queryField: "messagesByChatRoom"
	) {
	id: ID!
	createdAt: String
	text: String!
	userID: ID!
	chatRoomID: ID!
	user: User @connection(fields: ["userID"])
	chatRoom: ChatRoom @connection(fields: ["chatRoomID"])
}
type Sneaker
	@model
	@key(
		name: "byUser"
		fields: ["userID", "createdAt"]
		queryField: "sneakerByUser"
	) {
	id: ID!
	brand: String!
	primaryName: String!
	secondaryName: String!
	image: String!
	sneakerStoreID: ID!
	sneaker: SneakerStore @connection(fields: ["sneakerStoreID"])
	userID: ID!
	user: User @connection(fields: ["userID"])
	claim: Claim @connection(fields: ["id"])
	createdAt: String
	prevSellers: [String]
}
type SoldSneaker
	@model
	@key(name: "byUser", fields: ["userID"], queryField: "SoldItemByUser") {
	id: ID!
	brand: String!
	primaryName: String!
	secondaryName: String!
	image: String!
	userID: ID!
	user: User @connection(fields: ["userID"])
	createdAt: String
}
type Claim @model {
	id: ID!
	userID: ID!
	sneakerID: ID!
	user: User! @connection(fields: ["userID"])
	sneaker: Sneaker! @connection(fields: ["sneakerID"])
	status: ClaimStatus!
	refNumber: String!
	claimMessage: String
	createdAt: String
}

type ListedItem
	@model
	@key(name: "byUser", fields: ["sellerID"], queryField: "listedItemByUser")
	@key(
		name: "byZipCode"
		fields: ["zipCode"]
		queryField: "listedItemByZipCode"
	)
	@key(name: "byTag", fields: ["brand"], queryField: "listedItemByBrand")
	@key(name: "byPrice", fields: ["price"], queryField: "listedItemByPrice")
	@key(name: "bySize", fields: ["size"], queryField: "listedItemBySize")
	@key(
		name: "byCondition"
		fields: ["condition"]
		queryField: "listedItemByCondition"
	)
	@key(
		name: "byStatus"
		fields: ["status", "createdAt"]
		queryField: "listedItemByStatus"
	) {
	id: ID!
	sneakerID: ID!
	sneakerData: Sneaker! @connection(fields: ["sneakerID"])
	zipCode: String!
	images: [String]!
	size: String!
	condition: String!
	status: LisitingStatus!
	price: String!
	brand: String!
	description: String
	sellerID: ID!
	seller: User! @connection(fields: ["sellerID"])
	createdAt: String
}
type Offer
	@model
	@key(name: "byUser", fields: ["buyingUserID"], queryField: "offerByUser") {
	id: ID!
	offerAmount: String!
	status: OfferStatus!
	sellerConfirmed: Boolean!
	buyerConfirmed: Boolean!
	buyingUserID: ID!
	sellingUserID: ID!
	seller: User! @connection(fields: ["sellingUserID"])
	buyer: User! @connection(fields: ["buyingUserID"])
	listedItemID: ID!
	listedItem: ListedItem! @connection(fields: ["listedItemID"])
	createdAt: String
}
enum OfferStatus {
	accepted
	pending
	declined
	completed
}
type SneakerStore @model(timestamps: null) {
	id: ID!
	brand: String!
	primaryName: String!
	secondaryName: String!
	image: String!
	points: Int!
}
enum ClaimStatus {
	verified
	pending
	denied
}

enum LisitingStatus {
	sold
	available
}

enum ChatRoomStatus {
	active
	archive
}
